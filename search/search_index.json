{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs Git e Github Git e Github s\u00e3o ferramentas de versionamento de c\u00f3digo. Assista e esse v\u00eddeo e leia isso aqui para entendermais sobre github e como instalar a CLI do Github. Dessa forma conseguimos configurar nosso projeto com o comando gh repo create Pyenv O Pyenv \u00e9 uma ferramenta poderosa para gerenciar m\u00faltiplas vers\u00f5es do Python. Com ela, \u00e9 poss\u00edvel instalar v\u00e1rias vers\u00f5es do Python e alternar entre elas de maneira flex\u00edvel e eficiente. Isso \u00e9 especialmente \u00fatil em projetos que exigem vers\u00f5es espec\u00edficas do Python, garantindo compatibilidade e evitando conflitos. A instala\u00e7\u00e3o e o uso do Pyenv s\u00e3o simples, tornando a gest\u00e3o de vers\u00f5es do Python uma tarefa descomplicada para desenvolvedores de todos os n\u00edveis. Os principais comandos s\u00e3o: pyenv versions pyenv local 3.11.5 pyenv global 3.11.5 Poetry (tipo PIP) Poetry simplifica o gerenciamento de depend\u00eancias e pacotes no Python, substituindo o PIP. Os principais comandos s\u00e3o: Inicia um novo projeto interativamente poetry init Inicia um novo projeto interativamente poetry add [pacote] Remove uma depend\u00eancia do projeto. poetry remove [pacote] Ativa o ambiente virtual do projeto. poetry shell Arquivo .gitignore e versionando o que temos at\u00e9 aqui Aquecimento Crie um arquivo Git add Git commit Git push Git pull Seu chefe mandou deletar Git rm Seu chefe mandou voltar Git log Git revert Adicionar arquivo CSV Git add Git commit E agora? Mudar o nome disso tudo Git reset -hard Git rebase -i --root Git commit \u2013amend Git rebase \u2013continue Pre-commit check-yaml black (formatador) Nomes bonito-s check-added-large-files commitizen # .pre-commit-config.yaml repos: - repo: https://github.com/pre-commit/pre-commit-hooks rev: v4.5.0 hooks: - id: check-yaml - repo: https://github.com/psf/black rev: 23.12.1 hooks: - id: black - repo: https://github.com/pre-commit/pre-commit-hooks rev: v4.5.0 # Use a vers\u00e3o mais recente hooks: - id: check-added-large-files args: ['--maxkb=500'] # Define o tamanho m\u00e1ximo permitido - repo: https://github.com/commitizen-tools/commitizen rev: v3.13.0 hooks: - id: commitizen stages: [commit-msg] Boas pr\u00e1ticas de commit 1) Commits at\u00f4micos: evite dar git add . A pr\u00e1tica de criar commits at\u00f4micos consiste em criar um commit para cada modifica\u00e7\u00e3o no projeto, por exemplo, vamos imaginar que estamos trabalhando em um projeto e fizemos duas a\u00e7\u00f5es: - criamos um novo componente - fizemos altera\u00e7\u00f5es em um j\u00e1 existente Em vez de criarmos um \u00fanico commit para guardar as altera\u00e7\u00f5es que fizemos, faremos dois commits, seguindo um padr\u00e3o de commits at\u00f4micos. O primeiro commit ser\u00e1 com os arquivos envolvidos na cria\u00e7\u00e3o do novo componente, e o segundo com as altera\u00e7\u00f5es feitas em um componente j\u00e1 existente. Dessa maneira conseguimos escrever uma mensagem mais descritiva para o commit, as a\u00e7\u00f5es na linha do tempo ficam mais descritivas e \u00e9 mais pr\u00e1tico navegar pelos commits visualizando as modifica\u00e7\u00f5es. Na ocorr\u00eancia de um bug no projeto, \u00e9 bem mais f\u00e1cil de encontrar em qual commit ele foi inserido e reverter o que foi feito. 2) Padroniza\u00e7\u00e3o dos commits Outra pr\u00e1tica muito importante e que est\u00e1 ligada a anterior \u00e9 a padroniza\u00e7\u00e3o das mensagens dos commits, dessa maneira seguimos uma estrutura na hora de escrevermos as mensagens, o que deixa os commits estruturados e padronizados. Exemplos para feat (novas funcionalidades ou adi\u00e7\u00f5es): Adicionando uma nova funcionalidade a um script Python: feat(script): adicionar capacidade de processamento de dados em batch no process_data.py feat(api): implementar nova rota de autentica\u00e7\u00e3o no server.py Adicionando novos componentes em um projeto frontend: feat(frontend): adicionar novo componente de slider na homepage feat(ui): introduzir bot\u00e3o de compartilhamento social no post_view.jsx Incluindo scripts de automa\u00e7\u00e3o ou utilit\u00e1rios: feat(utils): adicionar script para limpeza autom\u00e1tica de logs feat(automation): criar ferramenta de deployment automatizado Expandindo funcionalidades de um aplicativo m\u00f3vel: feat(mobile): implementar notifica\u00e7\u00f5es push para iOS feat(app): adicionar suporte para tema escuro Exemplos para fix (corre\u00e7\u00f5es de bugs ou problemas): Corrigindo um bug em um script Python: fix(parser): corrigir erro de parsing de datas no import_data.py fix(api): resolver falha na autentica\u00e7\u00e3o em casos espec\u00edficos no auth.py Resolvendo problemas de interface de usu\u00e1rio: fix(frontend): ajustar layout quebrado em telas pequenas na homepage.css fix(ui): corrigir cor de texto ileg\u00edvel no modo escuro em settings.css Corre\u00e7\u00f5es em scripts de automa\u00e7\u00e3o ou utilit\u00e1rios: fix(build): resolver depend\u00eancia faltante no script de build fix(deploy): corrigir caminho de acesso no script de deployment Corre\u00e7\u00f5es de bugs em aplicativos m\u00f3veis: fix(mobile): corrigir crash ao abrir notifica\u00e7\u00f5es no Android fix(app): resolver problema de sincroniza\u00e7\u00e3o de dados em background Lembrando que \u00e9 importante que a mensagem do commit seja clara e descreva especificamente o que foi alterado e por que a altera\u00e7\u00e3o foi necess\u00e1ria. Isso ajuda outros colaboradores do projeto a entender o contexto e o prop\u00f3sito das mudan\u00e7as feitas. Mudan\u00e7as no .gitignore Quando voc\u00ea est\u00e1 adicionando algo ao .gitignore: chore(gitignore): adicionar arquivos de log chore(gitignore): ignorar arquivos de ambiente virtual Quando voc\u00ea est\u00e1 removendo algo do .gitignore: chore(gitignore): remover entradas obsoletas chore(gitignore): permitir arquivos de configura\u00e7\u00e3o de IDE Mudan\u00e7as no pyproject.toml Para atualiza\u00e7\u00f5es de depend\u00eancias: build(deps): atualizar depend\u00eancias fix(deps): corrigir vers\u00f5es de depend\u00eancias para compatibilidade Para adicionar novas depend\u00eancias: feat(deps): adicionar biblioteca requests feat(deps): incluir pytest para testes Para mudan\u00e7as na configura\u00e7\u00e3o do projeto: build(pyproject): configurar ferramentas de linting build(pyproject): ajustar configura\u00e7\u00f5es de empacotamento Explicando os Prefixos: feat: Uma nova funcionalidade para o usu\u00e1rio, n\u00e3o uma nova funcionalidade para scripts de build. fix: Corre\u00e7\u00e3o de bug para o usu\u00e1rio, n\u00e3o uma corre\u00e7\u00e3o para scripts de build. build: Mudan\u00e7as que afetam o sistema de build ou depend\u00eancias externas (exemplo: scopes: gulp, broccoli, npm). chore: Atualiza\u00e7\u00f5es no processo de build, altera\u00e7\u00f5es em ferramentas auxiliares e bibliotecas como documenta\u00e7\u00e3o gerada. Esses prefixos ajudam a categorizar o tipo de mudan\u00e7a que est\u00e1 sendo feita, tornando mais f\u00e1cil para outros desenvolvedores entenderem rapidamente o impacto de cada commit no projeto. Mkdocs 1. Instala\u00e7\u00e3o do MkDocs Primeiro, voc\u00ea precisa instalar o MkDocs. Como seu projeto usa Poetry para gerenciamento de depend\u00eancias, voc\u00ea pode adicionar o MkDocs como uma depend\u00eancia de desenvolvimento: poetry add mkdocs --dev Isso garantir\u00e1 que o MkDocs seja instalado no ambiente virtual do seu projeto. 2. Configura\u00e7\u00e3o Inicial Ap\u00f3s a instala\u00e7\u00e3o, voc\u00ea pode criar um novo site de documenta\u00e7\u00e3o com MkDocs: poetry run mkdocs new . Isso criar\u00e1 um novo arquivo mkdocs.yml e uma pasta docs no diret\u00f3rio raiz do seu projeto. O arquivo mkdocs.yml \u00e9 usado para configurar seu site de documenta\u00e7\u00e3o, enquanto a pasta docs conter\u00e1 os arquivos Markdown da sua documenta\u00e7\u00e3o. 3. Personaliza\u00e7\u00e3o da Configura\u00e7\u00e3o Edite o arquivo mkdocs.yml para personalizar a configura\u00e7\u00e3o do seu site de documenta\u00e7\u00e3o. Por exemplo: site_name: Nome do seu Projeto nav: - Home: index.md - Sobre: about.md 4. Adicionando Conte\u00fado Adicione ou edite arquivos Markdown na pasta docs para criar o conte\u00fado da sua documenta\u00e7\u00e3o. Por exemplo, voc\u00ea pode come\u00e7ar editando docs/index.md . 5. Visualiza\u00e7\u00e3o Local Para visualizar a documenta\u00e7\u00e3o localmente, execute: poetry run mkdocs serve Isso iniciar\u00e1 um servidor local, e voc\u00ea poder\u00e1 visualizar sua documenta\u00e7\u00e3o navegando para http://127.0.0.1:8000/ no seu navegador. 6. Constru\u00e7\u00e3o do Site Quando estiver pronto para construir o site da documenta\u00e7\u00e3o, use: poetry run mkdocs build Isso gerar\u00e1 uma vers\u00e3o est\u00e1tica do seu site na pasta site que pode ser hospedada em qualquer servidor web. 7. Atualiza\u00e7\u00e3o do README N\u00e3o se esque\u00e7a de atualizar o README.md do seu projeto para incluir informa\u00e7\u00f5es sobre a documenta\u00e7\u00e3o e como visualiz\u00e1-la ou constru\u00ed-la localmente. 8. Commit e Push Finalmente, fa\u00e7a commit das mudan\u00e7as no seu reposit\u00f3rio Git e fa\u00e7a push para o GitHub: git add mkdocs.yml docs/ git commit -m \"feat: adicionar mkdocs para documenta\u00e7\u00e3o do projeto\" git push 9. Deploy Agora fa\u00e7a o Deploy mkdocs gh-deploy Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Setup"},{"location":"#welcome-to-mkdocs","text":"","title":"Welcome to MkDocs"},{"location":"#git-e-github","text":"Git e Github s\u00e3o ferramentas de versionamento de c\u00f3digo. Assista e esse v\u00eddeo e leia isso aqui para entendermais sobre github e como instalar a CLI do Github. Dessa forma conseguimos configurar nosso projeto com o comando gh repo create","title":"Git e Github"},{"location":"#pyenv","text":"O Pyenv \u00e9 uma ferramenta poderosa para gerenciar m\u00faltiplas vers\u00f5es do Python. Com ela, \u00e9 poss\u00edvel instalar v\u00e1rias vers\u00f5es do Python e alternar entre elas de maneira flex\u00edvel e eficiente. Isso \u00e9 especialmente \u00fatil em projetos que exigem vers\u00f5es espec\u00edficas do Python, garantindo compatibilidade e evitando conflitos. A instala\u00e7\u00e3o e o uso do Pyenv s\u00e3o simples, tornando a gest\u00e3o de vers\u00f5es do Python uma tarefa descomplicada para desenvolvedores de todos os n\u00edveis. Os principais comandos s\u00e3o: pyenv versions pyenv local 3.11.5 pyenv global 3.11.5","title":"Pyenv"},{"location":"#poetry-tipo-pip","text":"Poetry simplifica o gerenciamento de depend\u00eancias e pacotes no Python, substituindo o PIP. Os principais comandos s\u00e3o: Inicia um novo projeto interativamente poetry init Inicia um novo projeto interativamente poetry add [pacote] Remove uma depend\u00eancia do projeto. poetry remove [pacote] Ativa o ambiente virtual do projeto. poetry shell","title":"Poetry (tipo PIP)"},{"location":"#arquivo-gitignore-e-versionando-o-que-temos-ate-aqui","text":"","title":"Arquivo .gitignore e versionando o que temos at\u00e9 aqui"},{"location":"#aquecimento","text":"Crie um arquivo Git add Git commit Git push Git pull Seu chefe mandou deletar Git rm Seu chefe mandou voltar Git log Git revert Adicionar arquivo CSV Git add Git commit E agora? Mudar o nome disso tudo Git reset -hard Git rebase -i --root Git commit \u2013amend Git rebase \u2013continue","title":"Aquecimento"},{"location":"#pre-commit","text":"check-yaml black (formatador) Nomes bonito-s check-added-large-files commitizen # .pre-commit-config.yaml repos: - repo: https://github.com/pre-commit/pre-commit-hooks rev: v4.5.0 hooks: - id: check-yaml - repo: https://github.com/psf/black rev: 23.12.1 hooks: - id: black - repo: https://github.com/pre-commit/pre-commit-hooks rev: v4.5.0 # Use a vers\u00e3o mais recente hooks: - id: check-added-large-files args: ['--maxkb=500'] # Define o tamanho m\u00e1ximo permitido - repo: https://github.com/commitizen-tools/commitizen rev: v3.13.0 hooks: - id: commitizen stages: [commit-msg]","title":"Pre-commit"},{"location":"#boas-praticas-de-commit","text":"1) Commits at\u00f4micos: evite dar git add . A pr\u00e1tica de criar commits at\u00f4micos consiste em criar um commit para cada modifica\u00e7\u00e3o no projeto, por exemplo, vamos imaginar que estamos trabalhando em um projeto e fizemos duas a\u00e7\u00f5es: - criamos um novo componente - fizemos altera\u00e7\u00f5es em um j\u00e1 existente Em vez de criarmos um \u00fanico commit para guardar as altera\u00e7\u00f5es que fizemos, faremos dois commits, seguindo um padr\u00e3o de commits at\u00f4micos. O primeiro commit ser\u00e1 com os arquivos envolvidos na cria\u00e7\u00e3o do novo componente, e o segundo com as altera\u00e7\u00f5es feitas em um componente j\u00e1 existente. Dessa maneira conseguimos escrever uma mensagem mais descritiva para o commit, as a\u00e7\u00f5es na linha do tempo ficam mais descritivas e \u00e9 mais pr\u00e1tico navegar pelos commits visualizando as modifica\u00e7\u00f5es. Na ocorr\u00eancia de um bug no projeto, \u00e9 bem mais f\u00e1cil de encontrar em qual commit ele foi inserido e reverter o que foi feito. 2) Padroniza\u00e7\u00e3o dos commits Outra pr\u00e1tica muito importante e que est\u00e1 ligada a anterior \u00e9 a padroniza\u00e7\u00e3o das mensagens dos commits, dessa maneira seguimos uma estrutura na hora de escrevermos as mensagens, o que deixa os commits estruturados e padronizados.","title":"Boas pr\u00e1ticas de commit"},{"location":"#exemplos-para-feat-novas-funcionalidades-ou-adicoes","text":"Adicionando uma nova funcionalidade a um script Python: feat(script): adicionar capacidade de processamento de dados em batch no process_data.py feat(api): implementar nova rota de autentica\u00e7\u00e3o no server.py Adicionando novos componentes em um projeto frontend: feat(frontend): adicionar novo componente de slider na homepage feat(ui): introduzir bot\u00e3o de compartilhamento social no post_view.jsx Incluindo scripts de automa\u00e7\u00e3o ou utilit\u00e1rios: feat(utils): adicionar script para limpeza autom\u00e1tica de logs feat(automation): criar ferramenta de deployment automatizado Expandindo funcionalidades de um aplicativo m\u00f3vel: feat(mobile): implementar notifica\u00e7\u00f5es push para iOS feat(app): adicionar suporte para tema escuro","title":"Exemplos para feat (novas funcionalidades ou adi\u00e7\u00f5es):"},{"location":"#exemplos-para-fix-correcoes-de-bugs-ou-problemas","text":"Corrigindo um bug em um script Python: fix(parser): corrigir erro de parsing de datas no import_data.py fix(api): resolver falha na autentica\u00e7\u00e3o em casos espec\u00edficos no auth.py Resolvendo problemas de interface de usu\u00e1rio: fix(frontend): ajustar layout quebrado em telas pequenas na homepage.css fix(ui): corrigir cor de texto ileg\u00edvel no modo escuro em settings.css Corre\u00e7\u00f5es em scripts de automa\u00e7\u00e3o ou utilit\u00e1rios: fix(build): resolver depend\u00eancia faltante no script de build fix(deploy): corrigir caminho de acesso no script de deployment Corre\u00e7\u00f5es de bugs em aplicativos m\u00f3veis: fix(mobile): corrigir crash ao abrir notifica\u00e7\u00f5es no Android fix(app): resolver problema de sincroniza\u00e7\u00e3o de dados em background Lembrando que \u00e9 importante que a mensagem do commit seja clara e descreva especificamente o que foi alterado e por que a altera\u00e7\u00e3o foi necess\u00e1ria. Isso ajuda outros colaboradores do projeto a entender o contexto e o prop\u00f3sito das mudan\u00e7as feitas.","title":"Exemplos para fix (corre\u00e7\u00f5es de bugs ou problemas):"},{"location":"#mudancas-no-gitignore","text":"Quando voc\u00ea est\u00e1 adicionando algo ao .gitignore: chore(gitignore): adicionar arquivos de log chore(gitignore): ignorar arquivos de ambiente virtual Quando voc\u00ea est\u00e1 removendo algo do .gitignore: chore(gitignore): remover entradas obsoletas chore(gitignore): permitir arquivos de configura\u00e7\u00e3o de IDE","title":"Mudan\u00e7as no .gitignore"},{"location":"#mudancas-no-pyprojecttoml","text":"Para atualiza\u00e7\u00f5es de depend\u00eancias: build(deps): atualizar depend\u00eancias fix(deps): corrigir vers\u00f5es de depend\u00eancias para compatibilidade Para adicionar novas depend\u00eancias: feat(deps): adicionar biblioteca requests feat(deps): incluir pytest para testes Para mudan\u00e7as na configura\u00e7\u00e3o do projeto: build(pyproject): configurar ferramentas de linting build(pyproject): ajustar configura\u00e7\u00f5es de empacotamento","title":"Mudan\u00e7as no pyproject.toml"},{"location":"#explicando-os-prefixos","text":"feat: Uma nova funcionalidade para o usu\u00e1rio, n\u00e3o uma nova funcionalidade para scripts de build. fix: Corre\u00e7\u00e3o de bug para o usu\u00e1rio, n\u00e3o uma corre\u00e7\u00e3o para scripts de build. build: Mudan\u00e7as que afetam o sistema de build ou depend\u00eancias externas (exemplo: scopes: gulp, broccoli, npm). chore: Atualiza\u00e7\u00f5es no processo de build, altera\u00e7\u00f5es em ferramentas auxiliares e bibliotecas como documenta\u00e7\u00e3o gerada. Esses prefixos ajudam a categorizar o tipo de mudan\u00e7a que est\u00e1 sendo feita, tornando mais f\u00e1cil para outros desenvolvedores entenderem rapidamente o impacto de cada commit no projeto.","title":"Explicando os Prefixos:"},{"location":"#mkdocs","text":"","title":"Mkdocs"},{"location":"#1-instalacao-do-mkdocs","text":"Primeiro, voc\u00ea precisa instalar o MkDocs. Como seu projeto usa Poetry para gerenciamento de depend\u00eancias, voc\u00ea pode adicionar o MkDocs como uma depend\u00eancia de desenvolvimento: poetry add mkdocs --dev Isso garantir\u00e1 que o MkDocs seja instalado no ambiente virtual do seu projeto.","title":"1. Instala\u00e7\u00e3o do MkDocs"},{"location":"#2-configuracao-inicial","text":"Ap\u00f3s a instala\u00e7\u00e3o, voc\u00ea pode criar um novo site de documenta\u00e7\u00e3o com MkDocs: poetry run mkdocs new . Isso criar\u00e1 um novo arquivo mkdocs.yml e uma pasta docs no diret\u00f3rio raiz do seu projeto. O arquivo mkdocs.yml \u00e9 usado para configurar seu site de documenta\u00e7\u00e3o, enquanto a pasta docs conter\u00e1 os arquivos Markdown da sua documenta\u00e7\u00e3o.","title":"2. Configura\u00e7\u00e3o Inicial"},{"location":"#3-personalizacao-da-configuracao","text":"Edite o arquivo mkdocs.yml para personalizar a configura\u00e7\u00e3o do seu site de documenta\u00e7\u00e3o. Por exemplo: site_name: Nome do seu Projeto nav: - Home: index.md - Sobre: about.md","title":"3. Personaliza\u00e7\u00e3o da Configura\u00e7\u00e3o"},{"location":"#4-adicionando-conteudo","text":"Adicione ou edite arquivos Markdown na pasta docs para criar o conte\u00fado da sua documenta\u00e7\u00e3o. Por exemplo, voc\u00ea pode come\u00e7ar editando docs/index.md .","title":"4. Adicionando Conte\u00fado"},{"location":"#5-visualizacao-local","text":"Para visualizar a documenta\u00e7\u00e3o localmente, execute: poetry run mkdocs serve Isso iniciar\u00e1 um servidor local, e voc\u00ea poder\u00e1 visualizar sua documenta\u00e7\u00e3o navegando para http://127.0.0.1:8000/ no seu navegador.","title":"5. Visualiza\u00e7\u00e3o Local"},{"location":"#6-construcao-do-site","text":"Quando estiver pronto para construir o site da documenta\u00e7\u00e3o, use: poetry run mkdocs build Isso gerar\u00e1 uma vers\u00e3o est\u00e1tica do seu site na pasta site que pode ser hospedada em qualquer servidor web.","title":"6. Constru\u00e7\u00e3o do Site"},{"location":"#7-atualizacao-do-readme","text":"N\u00e3o se esque\u00e7a de atualizar o README.md do seu projeto para incluir informa\u00e7\u00f5es sobre a documenta\u00e7\u00e3o e como visualiz\u00e1-la ou constru\u00ed-la localmente.","title":"7. Atualiza\u00e7\u00e3o do README"},{"location":"#8-commit-e-push","text":"Finalmente, fa\u00e7a commit das mudan\u00e7as no seu reposit\u00f3rio Git e fa\u00e7a push para o GitHub: git add mkdocs.yml docs/ git commit -m \"feat: adicionar mkdocs para documenta\u00e7\u00e3o do projeto\" git push","title":"8. Commit e Push"},{"location":"#9-deploy","text":"Agora fa\u00e7a o Deploy mkdocs gh-deploy","title":"9. Deploy"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"dbtcore/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"DbtCore"},{"location":"dbtcore/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"dbtcore/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"dbtcore/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"duckdb/","text":"duckdb Em nossa rotina temos que trabalhar muitas vezes consumindo; arquivos csv, parquet e outros formatos, e muitas vezes essa atividade n\u00e3o \u00e9 t\u00e3o simples, est\u00e3o muitas vezes na AWS, Azure, etc. O duckdb hoje \u00e9 a forma mais eficiente para se trabalhar com: M\u00faltiplos arquivos Quem \u00e9 muito bom em SQL (compatibilidade de c\u00f3digo) Quem gosta de Python, R ou Java Quem usa Pandas ou Polars Quem precisa de performance Quem quer aproveitar hardware local Utilizar um In process OLAP DBMS, Columnar database e com processamento vetorial \u00c9 o SQLite do Analytics Como instalar o duckdb? poetry add duckdb Como utiliz\u00e1-lo com o vscode? Acessar o Open Keyboard Shortcuts (JSON) Incluir esse atalha, dessa forma sempre que selecionarmos determinado texto e apertarmos shift+enter ele ir\u00e1 rodar esse c\u00f3digo no terminal Vamos brincar um pouco Fazer o Exerc\u00edcio 01 Vamos criar nossa primeira tabela /o/ Por ele rodar in-processo, ao sairmos do programa perdemos os dados Exemplo: Persistindo os dados ao iniciar o CLI Alguns pontos importantes sobre o formato duckdb 1 arquivo \u00fanico (todas as tabelas ficam no mesmo arquivo) Suporta update Armazenada no formato colunar Exercicio 01 Criar uma tabela gen\u00e9rica SHOW tables; CREATE TABLE transacoes ( id INT, usuario_id INT, valor DECIMAL(10, 2), data_transacao DATE ); SHOW tables; INSERT INTO transacoes (id, usuario_id, valor, data_transacao) VALUES (1, 1, 100.00, '2024-01-01'), (2, 2, 200.00, '2024-01-01'), (3, 1, 150.00, '2024-01-02'), (4, NULL, 120.00, '2024-01-02'), -- Usu\u00e1rio NULL (5, 2, 130.00, '2024-01-03'), (6, NULL, 110.00, '2024-01-03'), -- Usu\u00e1rio NULL (7, 1, 160.00, '2024-01-04'), (8, 2, 100.00, '2024-01-04'); SELECT usuario_id, SUM(valor) AS total FROM transacoes GROUP BY usuario_id; ALTER TABLE transacoes ADD tipo_transacao VARCHAR(10); SELECT * FROM transacoes; ALTER TABLE transacoes ADD categoria VARCHAR(20); SELECT * FROM transacoes; -- DELETE FROM transacoes; CREATE TEMPORARY TABLE backup_transacoes AS SELECT * FROM transacoes; select * from backup_transacoes; DELETE FROM transacoes; SELECT * FROM transacoes; INSERT INTO transacoes (id, usuario_id, valor, data_transacao, tipo_transacao, categoria) VALUES (1, 1, 100.00, '2024-01-01', 'compra', 'eletronicos'), (2, 2, 200.00, '2024-01-01', 'venda', 'livros'), (3, 1, 150.00, '2024-01-02', 'compra', 'vestuario'), (4, 3, 120.00, '2024-01-02', 'compra', 'alimentacao'), (5, 2, 130.00, '2024-01-03', 'venda', 'eletronicos'), (6, 3, 110.00, '2024-01-03', 'compra', 'livros'), (7, 1, 160.00, '2024-01-04', 'venda', 'alimentacao'), (8, 2, 100.00, '2024-01-04', 'compra', 'vestuario'); SELECT * FROM transacoes; .exit","title":"Duckdb"},{"location":"duckdb/#duckdb","text":"Em nossa rotina temos que trabalhar muitas vezes consumindo; arquivos csv, parquet e outros formatos, e muitas vezes essa atividade n\u00e3o \u00e9 t\u00e3o simples, est\u00e3o muitas vezes na AWS, Azure, etc. O duckdb hoje \u00e9 a forma mais eficiente para se trabalhar com: M\u00faltiplos arquivos Quem \u00e9 muito bom em SQL (compatibilidade de c\u00f3digo) Quem gosta de Python, R ou Java Quem usa Pandas ou Polars Quem precisa de performance Quem quer aproveitar hardware local Utilizar um In process OLAP DBMS, Columnar database e com processamento vetorial \u00c9 o SQLite do Analytics Como instalar o duckdb? poetry add duckdb","title":"duckdb"},{"location":"duckdb/#como-utiliza-lo-com-o-vscode","text":"Acessar o Open Keyboard Shortcuts (JSON) Incluir esse atalha, dessa forma sempre que selecionarmos determinado texto e apertarmos shift+enter ele ir\u00e1 rodar esse c\u00f3digo no terminal Vamos brincar um pouco Fazer o Exerc\u00edcio 01 Vamos criar nossa primeira tabela /o/ Por ele rodar in-processo, ao sairmos do programa perdemos os dados Exemplo: Persistindo os dados ao iniciar o CLI Alguns pontos importantes sobre o formato duckdb 1 arquivo \u00fanico (todas as tabelas ficam no mesmo arquivo) Suporta update Armazenada no formato colunar","title":"Como utiliz\u00e1-lo com o vscode?"},{"location":"duckdb/#exercicio-01","text":"Criar uma tabela gen\u00e9rica SHOW tables; CREATE TABLE transacoes ( id INT, usuario_id INT, valor DECIMAL(10, 2), data_transacao DATE ); SHOW tables; INSERT INTO transacoes (id, usuario_id, valor, data_transacao) VALUES (1, 1, 100.00, '2024-01-01'), (2, 2, 200.00, '2024-01-01'), (3, 1, 150.00, '2024-01-02'), (4, NULL, 120.00, '2024-01-02'), -- Usu\u00e1rio NULL (5, 2, 130.00, '2024-01-03'), (6, NULL, 110.00, '2024-01-03'), -- Usu\u00e1rio NULL (7, 1, 160.00, '2024-01-04'), (8, 2, 100.00, '2024-01-04'); SELECT usuario_id, SUM(valor) AS total FROM transacoes GROUP BY usuario_id; ALTER TABLE transacoes ADD tipo_transacao VARCHAR(10); SELECT * FROM transacoes; ALTER TABLE transacoes ADD categoria VARCHAR(20); SELECT * FROM transacoes; -- DELETE FROM transacoes; CREATE TEMPORARY TABLE backup_transacoes AS SELECT * FROM transacoes; select * from backup_transacoes; DELETE FROM transacoes; SELECT * FROM transacoes; INSERT INTO transacoes (id, usuario_id, valor, data_transacao, tipo_transacao, categoria) VALUES (1, 1, 100.00, '2024-01-01', 'compra', 'eletronicos'), (2, 2, 200.00, '2024-01-01', 'venda', 'livros'), (3, 1, 150.00, '2024-01-02', 'compra', 'vestuario'), (4, 3, 120.00, '2024-01-02', 'compra', 'alimentacao'), (5, 2, 130.00, '2024-01-03', 'venda', 'eletronicos'), (6, 3, 110.00, '2024-01-03', 'compra', 'livros'), (7, 1, 160.00, '2024-01-04', 'venda', 'alimentacao'), (8, 2, 100.00, '2024-01-04', 'compra', 'vestuario'); SELECT * FROM transacoes; .exit","title":"Exercicio 01"}]}